Sure, I'll provide a simple backend using Node.js with Express and MongoDB to manage the canteen menu options. This backend will include routes to get, add, update, and delete menu items. ### Backend Code 1. **Install Dependencies** First, make sure you have Node.js and npm installed. Then, create a new directory for your project and run the following commands to initialize a new Node.js project and install the necessary dependencies: ```sh mkdir canteen-menu-backend cd canteen-menu-backend npm init -y npm install express mongoose body-parser cors ``` 2. **Create the Server** Create a file named `server.js` and add the following code: ```js const express = require('express'); const mongoose = require('mongoose'); const bodyParser = require('body-parser'); const cors = require('cors'); const app = express(); const port = process.env.PORT || 5000; // Middleware app.use(bodyParser.json()); app.use(cors()); // MongoDB connection mongoose.connect('mongodb://localhost:27017/canteen-menu', { useNewUrlParser: true, useUnifiedTopology: true, }); const db = mongoose.connection; db.on('error', console.error.bind(console, 'connection error:')); db.once('open', () => { console.log('Connected to MongoDB'); }); // Menu Item Schema const menuItemSchema = new mongoose.Schema({ name: String, description: String, price: Number, imageUrl: String, }); const MenuItem = mongoose.model('MenuItem', menuItemSchema); // Routes app.get('/api/menu', async (req, res) => { try { const menuItems = await MenuItem.find(); res.json(menuItems); } catch (err) { res.status(500).json({ message: err.message }); } }); app.post('/api/menu', async (req, res) => { const menuItem = new MenuItem({ name: req.body.name, description: req.body.description, price: req.body.price, imageUrl: req.body.imageUrl, }); try { const newMenuItem = await menuItem.save(); res.status(201).json(newMenuItem); } catch (err) { res.status(400).json({ message: err.message }); } }); app.put('/api/menu/:id', async (req, res) => { try { const menuItem = await MenuItem.findById(req.params.id); if (!menuItem) { return res.status(404).json({ message: 'Menu item not found' }); } menuItem.name = req.body.name; menuItem.description = req.body.description; menuItem.price = req.body.price; menuItem.imageUrl = req.body.imageUrl; const updatedMenuItem = await menuItem.save(); res.json(updatedMenuItem); } catch (err) { res.status(400).json({ message: err.message }); } }); app.delete('/api/menu/:id', async (req, res) => { try { const menuItem = await MenuItem.findById(req.params.id); if (!menuItem) { return res.status(404).json({ message: 'Menu item not found' }); } await menuItem.remove(); res.json({ message: 'Menu item deleted' }); } catch (err) { res.status(500).json({ message: err.message }); } }); app.listen(port, () => { console.log(`Server running on port ${port}`); }); ``` 3. **Run the Server** Make sure MongoDB is running on your machine. You can start the MongoDB server using the following command: ```sh mongod ``` Then, run your Node.js server: ```sh node server.js ``` Your backend server should now be running on `http://localhost:5000`. ### Connecting Frontend to Backend To connect the frontend to this backend, you will need to make HTTP requests to the backend API endpoints (`/api/menu`, `/api/menu/:id`, etc.) using JavaScript (e.g., using `fetch` or `axios`). Here is an example of how you might fetch the menu items in your frontend: ```js fetch('http://localhost:5000/api/menu') .then(response => response.json()) .then(data => { console.log(data); // Update your frontend with the fetched data }) .catch(error => console.error('Error fetching menu items:', error)); ``` This setup provides a basic backend for managing canteen menu options. You can expand and customize it further based on your specific requirements.